AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Stack for PHP Application

Parameters:
  VpcId:
    Type: String
    Description: The VPC id
  PublicSubnetId:
    Type: String
    Description: The public subnet id
  PrivateSubnetId:
    Type: String
    Description: The private subnet id
  # Add this parameter
  ContainerImage:
    Type: String
    Default: php:8.2-apache
    Description: PHP container image to use

Resources:
  # cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: php-app-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # 3. Create Service Security Group
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # 4. Create ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: php-app-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets: 
        - !Ref PublicSubnetId
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # 5. Create Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: php-app-tg
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId

  # 6. Create ALB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # 7. Create Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/php-app
      RetentionInDays: 30

  # 8. Create Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: php-app
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc    
      Cpu: '256'            
      Memory: '512'         
      ExecutionRoleArn: !Ref ExecutionRole 
      ContainerDefinitions:
        - Name: php-app     
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/php-app:latest 
          PortMappings:     
            - ContainerPort: 80
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: php-app

  # 9. Create ECS Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: php-app
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref ServiceSecurityGroup
          Subnets: 
            - !Ref PrivateSubnetId
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: php-app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  # IAM Roles remain the same
  ExecutionRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
  ServiceName:
    Description: The name of the ECS service
    Value: !Ref Service
  LoadBalancerDNS:
    Description: The DNS name of the load balancer
    Value: !GetAtt ALB.DNSName
  TargetGroupArn:
    Description: The ARN of the Target Group
    Value: !Ref TargetGroup
