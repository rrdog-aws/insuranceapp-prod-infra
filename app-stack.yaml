AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 App Stack

Parameters:
  VpcId:
    Type: String
    Description: The VPC id
  PublicSubnetId:
    Type: String
    Description: The public subnet id

Resources:
  EC2Role:
    Type: AWS::IAM::Role 
    Properties:
      RoleName: !Sub "${AWS::StackName}-EC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
      # SSM agent
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      # CloudWatch agent
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      # S3 read
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
      # S3 bucket read
      - PolicyName: S3BucketRead
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - arn:aws:s3:::VPCInsuranceAppProdInfra-S3Stack-1XVI39RE1LU9A/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
    
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourcePrefixListId: pl-0bd77a95ba8e317a6
  
  # Elastic IP
  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Associate the EIP with the EC2 instance
  WebServerEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Instance
      EIP: !Ref WebServerEIP
  
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            00_create_nginx_user:
              command: useradd -r -s /sbin/nologin nginx || true
            01_install_nginx:
              command: amazon-linux-extras install nginx1 -y
            02_install_dependencies:
              command: yum install -y php php-fpm amazon-ssm-agent amazon-cloudwatch-agent
            03_enable_nginx:
              command: amazon-linux-extras enable nginx1 -y
            04_chown_www:
              command: chown -R nginx:nginx /usr/share/nginx/html
            05_get_php_config:
              command: aws s3 cp s3://vpcinsuranceappprodinfra-s3stack-1xvi39re-s3bucket-lkingaovz59t/index.php /var/www/html/index.php
            06_fixpermissions:
              command: chown root:root /var/www/html/index.php && chmod 0644 /var/www/html/index.php

        files:
          /etc/nginx/conf.d/default.conf:
            content: |
              server {
                  listen 80 default_server;
                  server_name _;
                  root /var/www/html;
                  index index.php index.html;

                  location / {
                      try_files $uri $uri/ =404;
                  }

                  location ~ \.php$ {
                      include fastcgi_params;
                      fastcgi_pass 127.0.0.1:9000;
                      fastcgi_index index.php;
                      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  }
              }
            mode: '0644'
            owner: root
            group: root

          /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
            content: |
              {
                "agent": {
                  "metrics_collection_interval": 60,
                  "run_as_user": "root"
                },
                "metrics": {
                  "namespace": "EC2/App",
                  "metrics_collected": {
                    "cpu": {
                      "measurement": ["cpu_usage_idle","cpu_usage_system","cpu_usage_user"],
                      "metrics_collection_interval": 60,
                      "resources": ["*"]
                    },
                    "mem": {
                      "measurement": ["mem_used_percent"],
                      "metrics_collection_interval": 60
                    }
                  }
                }
              }
            mode: '0644'
            owner: root
            group: root

        services:
          sysvinit:
            nginx:
              enabled: true
              ensureRunning: true
            php-fpm:
              enabled: true
              ensureRunning: true
            amazon-ssm-agent:
              enabled: true
              ensureRunning: true
            amazon-cloudwatch-agent:
              enabled: true
              ensureRunning: true

    Properties:
      InstanceType: t3.small
      ImageId: !Sub 'resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
      SubnetId: !Ref PublicSubnetId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData: !Base64 |
        #!/bin/bash -xe
        yum install -y aws-cfn-bootstrap
        /opt/aws/bin/cfn-init -v --stack !Ref 'AWS::StackName' --resource Instance --region !Ref 'AWS::Region'
        /opt/aws/bin/cfn-signal -e $? --stack !Ref 'AWS::StackName' --resource Instance --region !Ref 'AWS::Region'

Outputs:
  EC2Id:
    Description: "Instance ID"
    Value: !Ref Instance
  
